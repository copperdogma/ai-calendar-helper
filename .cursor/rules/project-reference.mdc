---
description: 
globs: 
alwaysApply: true
---
## Project Structure
```
{{YOUR_PROJECT_NAME}}/
├── app/                    # Next.js 13+ App Router
│   ├── api/               # API routes
│   │   ├── auth/         # Authentication endpoints
│   │   │   └── session/  # Session management endpoints
│   │   └── health/       # Health check endpoint
│   ├── globals.css       # Global styles
│   ├── layout.tsx         # Root layout
│   └── page.tsx          # Home page
├── components/            # Reusable components
│   ├── auth/             # Authentication components
│   │   ├── SignInButton.tsx  # Sign-in/sign-out button
│   │   └── UserProfile.tsx   # User profile display
│   ├── ui/               # Base UI components
│   │   ├── Button.tsx    # Button with variants
│   │   ├── Card.tsx      # Card with subcomponents
│   │   ├── DateTimePicker.tsx # Date/time selection
│   │   ├── Dialog.tsx    # Modal dialogs
│   │   ├── Input.tsx     # Form input
│   │   ├── Label.tsx     # Form label
│   │   ├── Menu.tsx      # Dropdown menus
│   │   ├── Snackbar.tsx  # Notifications
│   │   └── TextField.tsx  # Text input with MUI styling
│   ├── forms/            # Form components
│   └── layouts/          # Layout components
├── lib/                  # Utility functions and configurations
│   ├── firebase.ts       # Firebase Web SDK configuration
│   ├── firebase-admin.ts # Firebase Admin SDK configuration
│   └── session.ts        # Session management utilities
├── middleware.ts         # Authentication middleware
├── tests/                # Test files
│   ├── e2e/             # End-to-end tests with Playwright
│   │   ├── auth/        # Authentication tests
│   │   └── ui/          # UI component tests
│   ├── unit/            # Unit tests with Jest
│   │   ├── components/  # Component tests
│   │   ├── api/         # API route tests
│   │   └── utils/       # Utility function tests
│   └── config/          # Test configuration
├── scripts/              # Helper scripts
│   └── run-e2e-with-checks.js    # E2E test orchestration script
```

## Component Architecture

### Authentication Components
- SignInButton: Handles sign-in/sign-out with Firebase
  - Variants: sign-in (default) and sign-out
  - Automatic state management
  - Loading states during auth
- UserProfile: Displays authenticated user information
  - Profile picture with proper styling
  - User name and email display
  - Dark theme compatible
  - Integrated sign-out button

### UI Components
- Button: default/destructive/outline/secondary/ghost/link variants
- Card: Header/Title/Description/Content/Footer subcomponents
- DateTimePicker: Date and time selection with validation
- Dialog: Modal dialogs with customizable header/content/actions
- Input: default/outline/ghost variants, form integration
- Label: default/error/success variants, accessibility support
- Menu: Dropdown menus with optional icons
- Snackbar: Toast notifications with severity levels
- TextField: Material UI text input with custom styling

### Implementation Details
- All components use 'use client' directive
- TypeScript for type safety
- Material UI for styling
- Material Design components with custom theming
- Proper ref forwarding
- Accessibility features
- Dark mode support via CSS variables

## Routes
- `/` - Dashboard (protected)
- `/login` - Authentication page
- `/about` - Public about page
- `/api/auth/session` - Session management
  - POST: Create session from Firebase token
  - DELETE: Remove session (sign out)
- `/api/health` - Health check endpoint

## Project Command Reference

This file summarizes key commands for development, testing, and code quality within this project.

### Core Development
- `npm run dev`: Start the development server.
- `npm run build`: Create a production build.
- `npm start`: Start the production server.

### AI Agent Server Management (PM2)
- `npm run ai:start`: Start the dev server managed by PM2 (background).
- `npm run ai:stop`: Stop the PM2-managed server.
- `npm run ai:restart`: Restart the PM2-managed server.
- `npm run ai:status`: Check the status of the PM2-managed server.
- `npm run ai:logs`: Show recent logs from the PM2-managed server.
- `npm run ai:health`: Check the `/api/health` endpoint of the running server.
- `npm run ai:port`: Display the port the PM2-managed server is using.

### Testing
- `npm test` or `npm run test:unit`: Run all Jest unit tests (components, API, utils).
- `npm run test:watch`: Run unit tests in watch mode.
- `npm run test:coverage`: Run unit tests with coverage report.
- `npm test <test-file> -- --coverage --collectCoverageFrom=<source-file>`: Run a specific test file with coverage report limited to its corresponding source file.

#### E2E Testing
- `npm run test:e2e`: **Primary E2E command** - Automatically starts Firebase emulators with seed data, starts the test server, runs all Playwright tests.
- `npm run test:e2e:ui-only`: Run only UI tests with emulators (no seed data).
- `npm run test:e2e:auth-only`: Run only authentication tests with emulators (no seed data).
- `npm run test:e2e:with-emulator`: Alternative way to run all tests with seed data (identical to test:e2e).
- `npm run test:e2e:debug`: Run E2E tests with Playwright's debug mode enabled.
- `npm run test:e2e:headed`: Run E2E tests in headed mode (visible browser).
- `npm run test:e2e:report`: View the HTML test report from previous test runs.
- `npm run test:e2e:auth-setup`: Run only the auth setup script (useful for preparing authentication for manual testing).

#### Firebase Emulators
- `npm run firebase:emulators`: Start Firebase emulators (Auth + Firestore) with clean state.
- `npm run firebase:emulators:import`: Start emulators with imported seed data.
- `npm run firebase:setup-test-user`: Create a test user in the Auth emulator.
- `npm run firebase:update-seed-data`: Update the seed data used for testing.
- `npm run firebase:emulators:export`: Export data from running emulators.

### Code Quality & Formatting
- `npm run lint`: Check for ESLint issues.
- `npm run lint:fix`: Automatically fix ESLint issues.
- `npm run format`: Format code using Prettier.
- `npm run format:check`: Check code formatting without making changes.
- `npm run type-check`: Run TypeScript compiler for type checking.
- `npm run validate`: Run lint, format check, and type check together.

## Environment Variables
Required in `.env.local`:
```bash
# Firebase
NEXT_PUBLIC_FIREBASE_API_KEY=
NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=
NEXT_PUBLIC_FIREBASE_PROJECT_ID=
NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET=
NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=
NEXT_PUBLIC_FIREBASE_APP_ID=

# Firebase Admin SDK
FIREBASE_PROJECT_ID=
FIREBASE_CLIENT_EMAIL=
FIREBASE_PRIVATE_KEY=

# Next Auth
NEXTAUTH_URL=http://localhost:3000
NEXTAUTH_SECRET=

# Test Configuration
TEST_USER_EMAIL=test@example.com
TEST_USER_PASSWORD=Test123!

# Database
POSTGRES_URL=
REDIS_URL=
```

## Tech Stack
- Next.js 15.2.2
- React 19
- TypeScript 5
- Material UI
- Firebase Auth
  - Sign-in provider (Google, Email/Password)
  - Custom session management
  - Protected routes
- Firebase Firestore
- Playwright for E2E testing
- Jest for unit testing
- PostgreSQL (pending)
- Redis (pending)
- Material Design components

## Configuration Files
- `postcss.config.mjs` - PostCSS configuration with Material UI
- `next.config.ts` - Next.js configuration
- `tsconfig.json` - TypeScript settings
- `.env.example` - Environment variables template
- `.eslintrc.js` - ESLint rules
- `.prettierrc` - Code formatting
- `jest.config.js` - Jest test configuration with three projects:
  - Components testing (jsdom environment)
  - API testing (node environment)
  - Integration testing (node environment)
- `playwright.config.ts` - Playwright E2E testing configuration
- `firebase.json` - Firebase emulator configuration
- `ecosystem.config.js` - PM2 configuration for AI agent server management

## CSS Architecture
```css
/* Global CSS Structure */

/*
  Base global styles are primarily managed by MUI's CssBaseline component,
  which provides CSS resets and basic HTML element styling.
  See `app/providers/ThemeRegistry.tsx` where CssBaseline is applied.
*/

/*
  Global CSS variables can be defined here if needed, but prefer
  defining theme tokens within the MUI theme configuration
  (see `lib/theme/`).
*/
:root {
  /* Example global variables (light mode defaults) */
  --background: #ffffff;
  --foreground: #171717;
  --transition-fast: 150ms;
  --transition-normal: 300ms;
}

/*
  Dark mode variables are typically handled by the MUI theme's
  palette configuration based on the selected mode (light/dark).
  However, CSS variables can be used for overrides if necessary.
*/
@media (prefers-color-scheme: dark) {
  :root {
    /* Example dark mode overrides using CSS variables */
    /* --background: #121212; */
    /* --foreground: #ffffff; */
  }
}

/*
  Minimal global overrides or utility classes can be added to
  `app/globals.css`. Avoid large global stylesheets; prefer
  component-level styling using MUI's `sx` prop or `styled()` API.
*/
```

## Testing Architecture

### End-to-End (E2E) Testing
- **Framework**: Playwright
- **Projects**:
  - `setup`: Authentication setup
  - `ui-tests`: Tests without authentication
  - `chromium`: Authenticated tests
- **Features**:
  - Automatic server management
  - Dynamic port handling
  - Firebase emulator integration
  - Authentication state reuse
  - Comprehensive debugging tools

### Unit Testing
- **Framework**: Jest
- **Projects**:
  - `jsdom`: Browser environment tests
  - `node`: Server-side tests
- **Features**:
  - Component testing with React Testing Library
  - API route testing with supertest
  - Mock implementations for external services
  - Coverage reporting

## Error Handling
- Form validation errors
- API error responses
- Authentication errors
- Database connection issues

## Performance Optimizations
- Server components by default
- Client components marked explicitly
- Proper code splitting
- Redis caching layer
- Optimized images and assets

## Security Measures
- Environment variables
- API route protection
- CORS configuration
- Rate limiting
- Input sanitization
- Firebase token verification
- Secure session cookies
- Server-side Admin SDK operations