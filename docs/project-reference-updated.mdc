---
description:
globs:
alwaysApply: false
---
## ⚠️ CRITICAL DEVELOPMENT RULES ⚠️

### Interactive Commands - NEVER USE
NEVER run these interactive commands that will freeze the AI assistant:
- `npm run dev` ❌
- `npm start` ❌
- `yarn dev` ❌
- `yarn start` ❌

### Correct Testing Approaches
ALWAYS use these non-interactive alternatives instead:
1. For API testing: `npm test tests/unit/api/your-test.js`
2. For E2E testing: `npm run test:e2e:auth-only` or `npm run test:e2e`
3. For managed server: `npm run ai:start` then `npm run ai:health`

## Project Structure
```
{{YOUR_PROJECT_NAME}}/
├── app/                    # Next.js 13+ App Router
│   ├── api/               # API routes
│   │   ├── auth/         # Authentication endpoints managed by NextAuth.js (e.g., /api/auth/signin)
│   │   └── health/       # Health check endpoint
│   ├── globals.css       # Global styles
│   ├── layout.tsx         # Root layout
│   └── page.tsx          # Home page
├── components/            # Reusable components
│   ├── auth/             # Authentication components
│   │   ├── SignInButton.tsx  # Sign-in/sign-out button (uses NextAuth.js)
│   │   └── UserProfile.tsx   # User profile display (from NextAuth.js session)
│   ├── ui/               # Base UI components (MUI based)
│   │   ├── Button.tsx    # Button with variants
│   │   ├── Card.tsx      # Card with subcomponents
│   │   ├── DateTimePicker.tsx # Date/time selection
│   │   ├── Dialog.tsx    # Modal dialogs
│   │   ├── Input.tsx     # Styled MUI input component
│   │   ├── Label.tsx     # Form label
│   │   ├── Menu.tsx      # Dropdown menus
│   │   ├── Snackbar.tsx  # Notifications
│   │   └── TextField.tsx  # Text input with MUI styling
│   ├── forms/            # Form components
│   └── layouts/          # Layout components
├── lib/                  # Utility functions and configurations
│   ├── auth-node.ts      # NextAuth.js Node runtime configuration
│   ├── auth-edge.ts      # NextAuth.js Edge runtime configuration (incl. middleware logic)
│   ├── auth-shared.ts    # Shared NextAuth.js configuration (providers, callbacks)
│   ├── auth/             # Authentication-related helper functions
│   │   ├── auth-credentials.ts  # Credentials provider login implementation
│   │   ├── auth-helpers.ts      # User and account management helpers
│   │   ├── auth-jwt.ts          # JWT token management
│   │   └── auth-jwt-helpers.ts  # JWT token helper functions
│   ├── prisma.ts         # Prisma client initialization
│   └── redis.ts          # Redis client initialization (optional, for rate limiting etc.)
├── middleware.ts         # Authentication middleware (delegates to NextAuth.js)
├── tests/                # Test files
│   ├── e2e/             # End-to-end tests with Playwright
│   │   ├── auth/        # Authentication tests
│   │   └── ui/          # UI component tests
│   ├── unit/            # Unit tests with Jest
│   │   ├── components/  # Component tests
│   │   ├── api/         # API route tests
│   │   └── utils/       # Utility function tests
│   └── config/          # Test configuration
├── scripts/              # Helper scripts
│   └── setup.js         # Project setup script (replaces placeholders, sets up env)
```

## Component Architecture

### Authentication Components
- SignInButton: Handles sign-in/sign-out using NextAuth.js (e.g., Google, Credentials)
  - Variants: sign-in (default) and sign-out
  - Automatic state management via NextAuth.js
  - Loading states during auth
- UserProfile: Displays authenticated user information from NextAuth.js session
  - Profile picture with proper styling
  - User name and email display
  - Dark theme compatible
  - Integrated sign-out button
- CombinedLoginOptions: Main login component with both Google and credentials login forms
  - Smooth transitions between auth methods
  - Form validation
  - Error handling
- CredentialsLoginForm: Email/password login form with validation
  - React Hook Form integration
  - Error state handling
  - Loading indicators
- SessionErrorHandler/Display: Components to catch and display session-related errors
  - Global error state management
  - User-friendly error messages

### UI Components
- Button: default/destructive/outline/secondary/ghost/link variants
- Card: Header/Title/Description/Content/Footer subcomponents
- DateTimePicker: Date and time selection with validation
- Dialog: Modal dialogs with customizable header/content/actions
- Input: Styled version of Material UI's base Input component, suitable for creating more complex custom inputs
- Label: default/error/success variants, accessibility support
- Menu: Dropdown menus with optional icons
- Snackbar: Toast notifications with severity levels
- TextField: Material UI text input with custom styling and variants (outlined, filled, standard)

### Implementation Details
- All components use 'use client' directive
- TypeScript for type safety
- Material Design components (MUI) with custom theming
- Proper ref forwarding
- Accessibility features
- Dark mode support via CSS variables

## Routes
- `/` - Dashboard (protected)
- `/login` - Authentication page (NextAuth.js handles actual login flow)
- `/register` - User registration page
- `/about` - Public about page
- `/profile` - User profile page (protected)
- `/api/auth/*` - Authentication endpoints automatically managed by NextAuth.js (e.g., sign-in, sign-out, session, providers)
- `/api/health` - Health check endpoint

## Project Command Reference

This file summarizes key commands for development, testing, and code quality within this project.

### Core Development
- `npm run dev`: Start the development server.
- `npm run build`: Create a production build.
- `npm run start`: Start the production server.
- `npm run setup`: Run the setup script to initialize your project.

### AI Agent Server Management (PM2)
- `npm run ai:start`: Start the dev server managed by PM2 (background).
- `npm run ai:stop`: Stop the PM2-managed server.
- `npm run ai:restart`: Restart the PM2-managed server.
- `npm run ai:status`: Check the status of the PM2-managed server.
- `npm run ai:logs`: Show recent logs from the PM2-managed server.
- `npm run ai:health`: Check the `/api/health` endpoint of the running server.
- `npm run ai:port`: Display the port the PM2-managed server is using.

### Testing
- `npm test` or `npm run test:unit`: Run all Jest unit tests (components, API, utils).
- `npm run test:watch`: Run unit tests in watch mode.
- `npm run test:coverage`: Run unit tests with coverage report.
- `npm test <test-file> -- --coverage --collectCoverageFrom=<source-file>`: Run a specific test file with coverage report limited to its corresponding source file.

#### E2E Testing
- `npm run test:e2e`: **Primary E2E command** - Starts the test server, runs all Playwright tests.
- `npm run test:e2e:ui-only`: Run only UI tests.
- `npm run test:e2e:auth-only`: Run only authentication tests.
- `npm run test:e2e:debug`: Run E2E tests with Playwright's debug mode enabled.
- `npm run test:e2e:headed`: Run E2E tests in headed mode (visible browser).
- `npm run test:e2e:report`: View the HTML test report from previous test runs.
- `npm run test:e2e:auth-setup`: Run only the auth setup script (useful for preparing authentication for manual testing).

### Code Quality & Formatting
- `npm run lint`: Check for ESLint issues.
- `npm run lint:fix`: Automatically fix ESLint issues.
- `npm run format`: Format code using Prettier.
- `npm run format:check`: Check code formatting without making changes.
- `npm run type-check`: Run TypeScript compiler for type checking.
- `npm run validate`: Run lint, format check, and type check together.

## Environment Variables
Required in `.env.local` (or equivalent for your environment):
```bash
# Database
DATABASE_URL="postgresql://USER:PASSWORD@HOST:PORT/DATABASE"

# Redis (Optional - for rate limiting, caching, etc.)
# REDIS_URL="redis://localhost:6379"
# ENABLE_REDIS_RATE_LIMITING="true"
# RATE_LIMIT_REGISTER_MAX_ATTEMPTS=10
# RATE_LIMIT_REGISTER_WINDOW_SECONDS=3600

# Google OAuth Credentials
GOOGLE_CLIENT_ID="YOUR_GOOGLE_CLIENT_ID"
GOOGLE_CLIENT_SECRET="YOUR_GOOGLE_CLIENT_SECRET"

# NextAuth Configuration
# NEXTAUTH_URL is optional for Vercel deployments, but recommended for local development (e.g., http://localhost:3000)
NEXTAUTH_URL=
NEXTAUTH_SECRET="YOUR_NEXTAUTH_SECRET_STRING" # Generate with `openssl rand -base64 32`

# Test User Configuration (Optional - for E2E tests or local development seeding)
# TEST_USER_EMAIL="test@example.com"
# TEST_USER_PASSWORD="Test123!"
```

## Tech Stack
- Next.js 15.2.2
- React 19
- TypeScript 5
- Material Design components (MUI)
- NextAuth.js (with Prisma Adapter for PostgreSQL) for authentication
  - Sign-in providers: Google, Email/Password (Credentials)
- PostgreSQL (primary user and application data store)
- Playwright for E2E testing
- Jest for unit testing
- Redis (optional, for rate limiting, session storage if not JWT, etc.)

## Configuration Files
- `next.config.ts` - Next.js configuration
- `tsconfig.json` - TypeScript settings
- `.env.example` - Environment variables template
- `eslint.config.mjs` - ESLint rules
- `.prettierrc` - Code formatting
- `jest.config.js` - Jest test configuration
- `playwright.config.ts` - Playwright E2E testing configuration
- `ecosystem.config.js` - PM2 configuration for AI agent server management

## CSS Architecture
```css
/* Global CSS Structure */
:root {
  --background: #ffffff;    // Light mode variables
  --foreground: #171717;
}

@theme inline {             // Theme configuration
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
}

@media (prefers-color-scheme: dark) {
  :root {                  // Dark mode variables
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}
```

## Testing Architecture

### End-to-End (E2E) Testing
- **Framework**: Playwright
- **Projects**:
  - `setup`: Authentication setup
  - `ui-tests`: Tests without authentication
  - `chromium`: Authenticated tests
- **Features**:
  - Automatic server management
  - Dynamic port handling
  - Authentication state reuse
  - Comprehensive debugging tools

### Unit Testing
- **Framework**: Jest
- **Projects**:
  - `jsdom`: Browser environment tests
  - `node`: Server-side tests
- **Features**:
  - Component testing with React Testing Library
  - API route testing with supertest
  - Mock implementations for external services
  - Coverage reporting

## Error Handling
- Form validation errors
- API error responses
- Authentication errors
- Database connection issues
- Global session error handling

## Performance Optimizations
- Server components by default
- Client components marked explicitly
- Proper code splitting
- Redis caching layer
- Optimized images and assets
- Route prefetching
- Automatic code splitting
- Tree shaking
- Response compression

## Security Measures
- Environment variables
- API route protection
- CORS configuration
- Rate limiting
- Input sanitization
- Secure session cookies
- Server-side Admin SDK operations
- Header security
- Content Security Policy
- XSS protection
- CSRF protection
- SQL injection protection
