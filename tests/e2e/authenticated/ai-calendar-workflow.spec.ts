import { test, expect } from '@playwright/test';

test.describe('AI Calendar Helper Workflow', () => {
  test.beforeEach(async ({ page }) => {
    // Mock the OpenAI API call to avoid real API charges
    await page.route('**/api/ai/parse-events', async route => {
      const request = route.request();
      const postData = request.postDataJSON();

      // Create mock response that matches the actual API format
      const inputText = postData.text || '';
      const mockResponse = {
        success: true,
        event: {
          id: 'test-event-1',
          title: inputText.includes('meeting') ? 'Team Meeting' : 'Sample Event',
          description: 'Generated by AI processing',
          startDate: '2025-06-12T20:00:00.000Z', // 8PM UTC = 4PM Eastern
          endDate: '2025-06-12T21:00:00.000Z', // 9PM UTC = 5PM Eastern
          location:
            inputText.includes('conference') || inputText.includes('room')
              ? 'Conference Room A'
              : '',
          timezone: 'America/New_York',
          confidence: {
            title: 0.95,
            description: 0.8,
            startDate: 0.9,
            endDate: 0.9,
            location: inputText.includes('room') ? 0.85 : 0.5,
            timezone: 0.9,
            overall: 0.88,
          },
          isAllDay: false,
          recurrence: null,
        },
        processingTimeMs: 2500,
      };

      // Simulate realistic processing delay
      await new Promise(resolve => setTimeout(resolve, 1000));

      await route.fulfill({
        status: 200,
        contentType: 'application/json',
        body: JSON.stringify(mockResponse),
      });
    });
  });

  test('should process event text and display parsed results', async ({ page }) => {
    // Navigate to Calendar Parser page
    await page.goto('/calendar-parser');

    // Verify page loaded
    await expect(page.getByRole('heading', { name: 'Calendar Parser' })).toBeVisible();

    // Find the text input area (not in the Raw JSON debug area)
    const textInput = page.locator('textarea[placeholder*="Enter your event text"]');
    await expect(textInput).toBeVisible();

    // Enter event text
    const eventText = 'Team meeting tomorrow at 2pm in the conference room';
    await textInput.fill(eventText);

    // Find and click the Parse Events button
    const parseButton = page.getByRole('button', { name: /parse events/i });
    await expect(parseButton).toBeEnabled();
    await parseButton.click();

    // Wait for results to appear
    await expect(page.getByText(/Found 1 event/i)).toBeVisible({ timeout: 10000 });

    // Verify event details are displayed - use more specific selectors
    await expect(page.getByRole('heading', { name: 'Team Meeting' })).toBeVisible();
    await expect(page.locator('p', { hasText: /June 12, 2025/ })).toBeVisible();

    // Use more specific selector for location that excludes debug textarea
    const locationParagraph = page.locator('p', { hasText: '📍 Conference Room A' });
    await expect(locationParagraph).toBeVisible();

    // Look for time in the event display area (not input or debug)
    await expect(page.getByText(/4:00 PM/)).toBeVisible(); // 8PM UTC = 4PM Eastern
    await expect(page.getByText(/Confidence: 88%/)).toBeVisible();

    // Verify raw JSON debugging area
    await expect(page.getByText(/Raw AI Response/)).toBeVisible();
    const debugTextArea = page.locator('textarea[readonly]').last();
    // Note: The debug textarea is aria-hidden but still accessible for value reading

    // Verify the raw response contains some debug data (doesn't need to be specific content)
    const debugValue = await debugTextArea.inputValue();
    expect(debugValue.length).toBeGreaterThan(0); // Just verify debug data exists

    // Verify form is re-enabled after processing
    await expect(parseButton).toBeEnabled();
    await expect(textInput).toBeEnabled();
    await expect(page.getByRole('button', { name: /clear/i })).toBeEnabled();
  });

  test('should handle API errors gracefully', async ({ page }) => {
    // Mock API error
    await page.route('**/api/ai/parse-events', async route => {
      await route.fulfill({
        status: 500,
        contentType: 'application/json',
        body: JSON.stringify({
          error: 'AI service temporarily unavailable',
        }),
      });
    });

    await page.goto('/calendar-parser');

    const textInput = page.locator('textarea[placeholder*="Enter your event text"]');
    await textInput.fill('Meeting tomorrow');

    const parseButton = page.getByRole('button', { name: /parse events/i });
    await parseButton.click();

    // Should show error message
    await expect(page.getByText(/AI service temporarily unavailable/i)).toBeVisible({
      timeout: 5000,
    });

    // Form should be usable again
    await expect(parseButton).toBeEnabled();
    await expect(textInput).toBeEnabled();
  });

  test('should validate required input', async ({ page }) => {
    await page.goto('/calendar-parser');

    const parseButton = page.getByRole('button', { name: /parse events/i });

    // Button should be disabled when no text
    await expect(parseButton).toBeDisabled();

    // Add text to enable button
    const textInput = page.locator('textarea[placeholder*="Enter your event text"]');
    await textInput.fill('Test event');
    await expect(parseButton).toBeEnabled();

    // Clear text to disable button again
    await textInput.fill('');
    await expect(parseButton).toBeDisabled();
  });

  test('should clear form when Clear button is clicked', async ({ page }) => {
    await page.goto('/calendar-parser');

    const textInput = page.locator('textarea[placeholder*="Enter your event text"]');
    const clearButton = page.getByRole('button', { name: /clear/i });

    // Fill text
    await textInput.fill('Some event text');
    await expect(textInput).toHaveValue('Some event text');

    // Click clear
    await clearButton.click();
    await expect(textInput).toHaveValue('');
  });

  test('should process complex event with all details', async ({ page }) => {
    // Mock detailed response
    await page.route('**/api/ai/parse-events', async route => {
      const mockResponse = {
        success: true,
        event: {
          id: 'detailed-event-1',
          title: 'Annual Company Retreat',
          description: 'Three-day team building event with outdoor activities',
          startDate: '2025-07-15T13:00:00.000Z', // 1PM UTC = 9AM Eastern
          endDate: '2025-07-17T21:00:00.000Z', // 9PM UTC = 5PM Eastern
          location: 'Mountain View Resort, Lake Tahoe',
          timezone: 'America/Los_Angeles',
          confidence: {
            title: 0.98,
            description: 0.92,
            startDate: 0.95,
            endDate: 0.93,
            location: 0.89,
            timezone: 0.85,
            overall: 0.92,
          },
          isAllDay: false,
          recurrence: null,
        },
        processingTimeMs: 4100,
      };

      await new Promise(resolve => setTimeout(resolve, 1200));
      await route.fulfill({
        status: 200,
        contentType: 'application/json',
        body: JSON.stringify(mockResponse),
      });
    });

    await page.goto('/calendar-parser');

    const textInput = page.locator('textarea[placeholder*="Enter your event text"]');
    await textInput.fill(
      'Annual company retreat from July 15-17 at Mountain View Resort in Lake Tahoe, includes team building activities'
    );

    const parseButton = page.getByRole('button', { name: /parse events/i });
    await parseButton.click();

    // Wait for complex event to be processed
    await expect(page.getByText(/Found 1 event/i)).toBeVisible({ timeout: 15000 });

    // Verify all details using specific selectors to avoid conflicts
    await expect(page.getByRole('heading', { name: 'Annual Company Retreat' })).toBeVisible();
    await expect(page.getByText(/Confidence: 92%/)).toBeVisible();

    // Use specific paragraph selector for location to avoid input and debug conflicts
    const locationParagraph = page.locator('p', { hasText: '📍 Mountain View Resort, Lake Tahoe' });
    await expect(locationParagraph).toBeVisible();

    // Verify timing details
    await expect(page.locator('p', { hasText: /July 15, 2025/ })).toBeVisible();
  });

  test('should maintain form state during navigation', async ({ page }) => {
    await page.goto('/calendar-parser');

    const textInput = page.locator('textarea[placeholder*="Enter your event text"]');
    await textInput.fill('Test meeting content');

    // Navigate away and back
    await page.goto('/profile');
    await page.goto('/calendar-parser');

    // Form should be reset (this is expected behavior)
    await expect(textInput).toHaveValue('');
  });
});
